******sc21l2s.patch******
test results
1. 2
2. 2
3. 2
4. 2
5. 2
6. 5
~~~~~~blocks.h~~~~~~
#ifndef BLOCKS_H
#define BLOCKS_H

// This class marks as object as blocking tom from walking here
class Blocks{};

#endif // BLOCKS_H
~~~~~~bomb.cpp~~~~~~
#include "bomb.h"

Bomb::bomb()
{

}
~~~~~~bomb.h~~~~~~
#ifndef BOMB_H
#define BOMB_H

#include "thing.h"
#include <string>

// a giant bolder that stops tom from walking through this location
class Bomb: public Thing
{
public:
    Bomb(){};
    ~Bomb(){};
    string getName()
    {
        return "bomb";
    }
};

#endif // BOMB_H
~~~~~~cave.cpp~~~~~~
#include <stdexcept>
#include <string>
#include <iostream>
#include <vector>
#include <string>

#include "cave.h"
#include "throw.h"
#include "rock.h"
#include "thing.h"
#include "location.h"
#include "move.h"
#include "place.h"
#include "explode.h"

using namespace std;

Cave::Cave(int w, int h) : width(w), height(h) // width and height of the cave
{

    map = new Location**[width];

    // Condensed 2 original nested loops into one nested loop. Altered values to accept user input as size of the cave.
    for (int x = 0; x < width; x++)
    {
        Location** column = new Location*[height];
        map[x] = column;
        for (int y = 0; y < height; y++)
        {
            column[y] = new Location();
            if ( x == 0 || y == 0 || x == width - 1 || y == height - 1 )
                 map[x][y] -> add( new Rock() );
        }
    }
    tom = new Tom();
    // add tom to the middle of the map
    tom -> setLocation( this, width/2,height/2);
}

Cave::Cave(const Cave &copy) noexcept
{
    // Copy constructor. Copied variable values and created deep copies of dynamically allocated varibles.

    width = copy.width;
    height = copy.height;

    map = new Location**[width];

    for (int x = 0; x < width; x++)
    {
        Location** column = new Location*[height];
         map[x] = column;
        for (int y = 0; y < height; y++)
        {
            column[y] = new Location();
            if ( x == 0 || y == 0 || x == width - 1 || y == height - 1 )
                 map[x][y] -> add( new Rock() );
        }
    }
    tom = new Tom();
    // add tom to the middle of the map
    tom -> setLocation( this, width/2,height/2);

}

Cave::~Cave()
{
    // Nested loop to delete all locations in 'map' array the same way it was constructed. Map array is then deleted.
    // 'Tom' doesn't require deleting as Tom gets added as a thing to the map, so is deleted with the map.

    for (int i = 0; i < width; i++)
    {
        for (int j = 0; j < height; j++)
        {
            delete map[i][j];
        }
    }
    delete[] map;
}

void Cave::command (string userCommand)
{
    if (Move().triggersOn(userCommand))
        Move().fire(*this, userCommand);
    else if (Place().triggersOn(userCommand))
        Place().fire(*this, userCommand);

    // Throw command added to run the throw class. Triggered when first word of input is "throw".
    else if (Throw().triggersOn(userCommand))
         Throw().fire(*this, userCommand);
    // Explode command added to run the explode class. Triggered when first word of input is "explode"
    else if (Explode().triggersOn(userCommand))
        Explode().fire(*this, userCommand);

    else
        cerr << "tom doesn't know how to "+userCommand << endl;;
}

void Cave::show()
{
    vector<Thing*>* thingsWithTom = map[tom -> getX()][tom -> getY()] -> getThings();

    // Altered loop conditions to accept user input values as size of the cave.
    for (int y = 0; y < height; y++)
    { // for all rows
        for (int x = 0; x < width; x++) // for all columns
            cout << map[x][y] -> show(); // output whatever we find there

        cout << "  "; // list the things at this location
        if (y <  (int) thingsWithTom -> size())
            cout << (*thingsWithTom)[y] -> getName();

        cout << endl;
    }

    cout << endl;
}
~~~~~~cave.h~~~~~~
#ifndef CAVE_H
#define CAVE_H

#include "location.h"
#include "tom.h"

using namespace std;

class Tom; // forward reference

// A cave which contains everything, including tom.
class Cave
{
public:
    Cave(){};
    Cave(int width, int height);
    Cave(const Cave &copy) noexcept;
    Cave& operator=(const Cave& copy) {}
    ~Cave();
    Location*** getMap() {return map;}
    void command (string s);
    void show();
    Tom *getTom() {return tom;}
    int getWidth() {return width;}
    int getHeight() {return height;}
private:
    int width, height;
    Tom *tom;
    Location*** map;
};

#endif // CAVE_H
~~~~~~CavePlusPlus.pro~~~~~~

CONFIG += c++11 console
#CONFIG -= app_bundle
QT-= gui

# You can make your code fail to compile if it uses deprecated APIs.
# In order to do so, uncomment the following line.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

SOURCES += \
        explode.cpp \
        throw.cpp \
        tom.cpp \
        cave.cpp \
        location.cpp \
        main.cpp \
        move.cpp \
        place.cpp

# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target

HEADERS += \
    blocks.h \
    bomb.h \
    cave.h \
    coin.h \
    command.h \
    explode.h \
    location.h \
    move.h \
    mushroom.h \
    place.h \
    placeable.h \
    rock.h \
    thing.h \
    throw.h \
    tom.h
~~~~~~coin.h~~~~~~
#ifndef COIN_H
#define COIN_H

#include "thing.h"

// a small coin that can be picked up.
class Coin : public Thing
{
    string getName()
    {
        return "coin";
    }
};

#endif // COIN_H
~~~~~~command.h~~~~~~
#ifndef COMMAND_H
#define COMMAND_H

#include "cave.h"

#include <string>

using namespace std;

// superclass of all user commands.
class Command {

public:
    Command(string triggerWord) : trigger(triggerWord) {}

    virtual bool triggersOn (string userCommand)
    {
        string userTrigger = userCommand;
        int index = userCommand.find(' ');
        if (index > 0)
                userTrigger = userCommand.substr(0, userCommand.find(' '));
        return trigger.compare(userTrigger) == 0;
    }

    virtual void fire(Cave& c, string arguments) =0;



protected:

    string tail(string userCommand) {

            int pos = userCommand.find(' ');
            if (pos >= 0)
                return userCommand.substr(userCommand.find(' ')+1, userCommand.length());
            else
                return "";
        }

    // Added function to pull first string command out of the user input
    // Finds location of first space, then counts number of chars until next space to get given command
    string firstCommand(string userCommand) {

        int spaceCount = 0, loc = 0;

        for (int i = 0; i < int(userCommand.length()); i++)
        {
            if (userCommand.at(i) == ' ' && spaceCount == 0)
            {
                spaceCount++;
                loc = (i + 1);
                continue;
            }
            if (userCommand.at(i) == ' ' && spaceCount == 1)
            {
                return userCommand.substr(loc, i - loc);
            }
        }
        return "";
    }

    // Added function to pull second string command out of the user input
    // Finds location of second space, then creates substring from that location +1 to the end of userCommand
    string secondCommand(string userCommand) {

        int spaceCount = 0;

        for (int i = 0; i < int(userCommand.length()); i++)
        {
            if (userCommand.at(i) == ' ')
            {
                spaceCount++;
                if (spaceCount == 2)
                {
                    return userCommand.substr((i + 1), userCommand.length() - i);
                }
            }
        }
        return "";
    }


private:
    string trigger;
};

#endif // COMMAND_H
~~~~~~explode.cpp~~~~~~
#include "explode.h"
#include "thing.h"

// Function to destroy anything in the current location except for Tom
void Explode::destroyNonTom(Cave& c, int x, int y)
{
    // Declare vector containing all things at the current location
    vector<Thing*>* th = c.getMap()[x][y]->getThings();

    // Loop through items at current location, removing anything that isn't tom
    for (Thing* t : *th)
    {
        if (t->getName() != "tom")
        {
            c.getMap()[x][y]->remove(t);
        }
    }
}

// Function to check whether a bomb is present at a location and explode it
bool Explode::checkBomb(Cave& c, int x, int y)
{
    Location* loc;
    // Check x & y values are valid and in bounds
    if (x < c.getWidth() && y < c.getHeight() && x > 0 && y > 0)
    {

    }
    else
    {
        cerr << "Out of bounds error" << endl;
        return false;
    }

    // Set location to current location specified by parameters
    loc = c.getMap()[x][y];

    // Declare vector containing all things in current location
    vector<Thing*>* th;
    th = loc->getThings();

    bool bombFound = false;

    // Loop through things in current location to check if a bomb is present and explode it
    for (Thing* t : *th)
    {
        // If a bomb is found, run function to "destroy"
        if (t->getName() == "bomb")
        {
            destroyNonTom(c, x, y);
            bombFound = true;
        }
    }
    return bombFound;
}

// Function to explode bombs in a chain starting from toms current location
// Run's until no bombs are left adjacent to be exploded
void Explode::fire(Cave& c, string userCommand)
{
    // Arrays to store x & y coordinates or each bomb
    int xCoord[c.getWidth()], yCoord[c.getHeight()];
    int index = 0, x = c.getTom()->getX(), y = c.getTom()->getY();
    bool checkFinished = false;

    // Check if there is a bomb in tom's location
    checkBomb(c, c.getTom()->getX(), c.getTom()->getY());

    // While there are still bombs adjacent or under tom, loop will continue running
    // Index is incremented on finding a bomb, and decremented on removing a bomb to get next bomb location to be exploded

    while (!checkFinished)
    {
        // If bomb check returns true, store location and increment index
        if (checkBomb(c, x, y-1))
        {
            xCoord[index] = x;
            yCoord[index] = y-1;
            index++;
        }
        if (checkBomb(c, x+1, y))
        {
            xCoord[index] = x+1;
            yCoord[index] = y;
            index++;
        }
        if (checkBomb(c, x, y+1))
        {
            xCoord[index] = x;
            yCoord[index] = y + 1;
            index++;
        }
        if (checkBomb(c, x-1, y))
        {
            xCoord[index] = x-1;
            yCoord[index] = y;
            index++;
        }
        // Loop ends when qSize is zero (all bombs exploded)
        if (index == 0)
        {
            checkFinished = true;
        }
        // Decrement index to get next bomb coordinates
        else
        {
            index--;
            x = xCoord[index];
            y = yCoord[index];
        }
    }
}
~~~~~~explode.h~~~~~~
#ifndef EXPLODE_H
#define EXPLODE_H

#include "coin.h"
#include "command.h"
#include "mushroom.h"
#include "rock.h"
#include "bomb.h"
#include <iostream>

/*
 *
 * This class is used to explode the bombs under and adjacent to Tom using the command
 * "explode" to trigger it. Also creates a chain of eplosions if bombs are next to
 * another bomb.
 *
*/

using namespace std;

class Explode : public Command
{
public:
    Explode() : Command("explode") {};
    void fire(Cave& c, string userCommand);
    void destroyNonTom(Cave& c, int x, int y);
    bool checkBomb(Cave& c, int x, int y);

};

#endif // EXPLODE_H
~~~~~~location.cpp~~~~~~

#include <algorithm>

#include "blocks.h"
#include "location.h"
#include "tom.h"

using namespace std;

void Location::add(Thing *t)
{
    things.push_back( t );
}

void Location::remove(Thing *t)
{
    // note we don't free the memory here
    things.erase(std::remove(things.begin(), things.end(), t), things.end());
}

// Location copy constructor to deep copy the vector of 'Thing' pointers.
Location::Location(const Location& copy) noexcept
{
    count = copy.count;

    for (Thing* t : copy.things)
    {
        things.push_back(t);
    }

}

char Location::show() {

    int junk = 0, blocking = 0, tom = 0;

    // count properties of things at this location
    for (Thing* t : things)
    {
        if (dynamic_cast<Blocks*>(t) ) // is t subclass of Blocks?
            blocking++;
        else if (dynamic_cast<Tom*> (t) != NULL ) // is t Tom?
            tom++;
        else
            junk++; // otherwise just junk
    }

    // return a character based on the properties
    if (blocking) // remember that
        return 'X';
    else if (junk > 0)
    {
        if (tom)
            return 'L';
        else
            return '_';
    }
    else if (tom)
        return '|';
    else
        return '.';
}

bool Location::isBlocking() // does this location block tom's travels?
{
    int blocking = 0;

    for (Thing * t : things)
        if ( dynamic_cast<Blocks*>(t) )// is t subclass of Blocks?
            blocking++;

    return blocking; // 0 means false, otherwise true
}
~~~~~~location.h~~~~~~
#ifndef LOCATION_H
#define LOCATION_H


#include <vector>

#include "thing.h"

class Location
{
public:
    Location()
    {
        ++count;
    }
    ~Location()
    {
        for (auto t : things)
            delete(t);
        --count;
    }
    Location(const Location& copy) noexcept;
    void add(Thing *t);
    void remove(Thing *t);
    char show();
    bool isBlocking();
    vector<Thing*>* getThings() { return &things; }
    static int count; // a count of the number of locations allocated/deleted

private:

    vector<Thing*> things;

};



#endif // LOCATION_H
~~~~~~main.cpp~~~~~~
//
// Do not change this file - but you might edit the arguments passed to main:
//  - Projects (spanner on right)
//  - Under "Build and Run", select "Run" (small green arrow)
//  - Edit "Command line arguments" (main panel)
//
// v1: initial release
// v2: removed std:: from some strings & allowed students to edit the Location class
//

#include <string>
#include <iostream>

#include "cave.h"
#include "test.cpp"

using namespace std;


int main(int argc, char** argv) {

    // Declared varibles initialised before they are assigned user input value from command line args
    int width = 0, height = 0;

    if (argc == 3) {
        width  = stoi (argv[1]);
        height = stoi (argv[2]);
    }

    if (argc != 2) {

        Cave c(width, height);

        string input;
        while (true) {

            c.show();

            cout << ">";
            getline(cin, input);

            if (input.compare("exit") == 0)
                break;
            c.command(input);
        }
    }
    else test();
}
~~~~~~move.cpp~~~~~~
#include "move.h"

void Move::fire(Cave& c, string userCommand)
{
    string s = tail(userCommand);

    int newTomX = c.getTom()->getX(),  newTomY = c.getTom()->getY();

    // Altered if statements to check entire string rather than first letter. Ensures more accuracy.
    // Additional "else if's" added here to ensure east and south movement functionality.
    // Checks string to determine direction.
    if (s == "west")
        newTomX--;
    else if  (s == "north")
        newTomY--;
    else if (s == "east")
        newTomX++;
    else if (s == "south")
        newTomY++;
    else
    {
        cerr << "tom can't \"" << s << "\"" << endl;
        return;
    }


    if (newTomX < 0 || newTomY < 0 || newTomX >= c.getHeight() ||newTomY >= c.getHeight())
    {
        cerr << "can't walk into the void" << endl;
        return;
    }
    else if ( c.getMap()[newTomX][newTomY] -> isBlocking() )
    {
        cerr << "something is blocking the way" << endl;
        return;
    }
    else if (newTomX != c.getTom()->getX() || newTomY != c.getTom()->getY())
    {
        c.getTom() -> setLocation (&c, newTomX, newTomY);
        cerr << "tom shuffles through the dank cave" << endl;
        return;
    }
}
~~~~~~move.h~~~~~~
#ifndef MOVE_H
#define MOVE_H

#include "cave.h"
#include "command.h"

#include <string>
#include <iostream>
#include <string>

using namespace std;


// a command to move tom around the cave.
class Move : public Command
{
public:
    Move() : Command("move") {};
    void fire(Cave& c, string userCommand);
};

#endif // MOVE_H
~~~~~~mushroom.h~~~~~~
#ifndef MUSHROOM_H
#define MUSHROOM_H

#include "thing.h"

// a small glowing mushroom on the ground, found wherever adventurers wander. Can be picked up.
class Mushroom : public Thing
{

    string getName()
    {
        return "mushroom";
    }
};

#endif // MUSHROOM_H
~~~~~~place.cpp~~~~~~
#include "place.h"
#include "thing.h"

void Place::fire(Cave& c, string userCommand)
{
    string s = tail(userCommand);
    Location* loc = c.getMap()[c.getTom()->getX()][c.getTom()->getY()];

    if (s.compare("coin")==0)
        loc ->add(new Coin());
    else if (s.compare("mushroom")==0)
        loc ->add(new Mushroom());
    else if (s.compare("bomb")==0)
        loc ->add(new Bomb());
    else
        cerr << "I don't know how to place a " << userCommand << endl;
}
~~~~~~place.h~~~~~~
#ifndef PLACE_H
#define PLACE_H

#include "coin.h"
#include "command.h"
#include "mushroom.h"
#include "rock.h"
#include "bomb.h"
#include <iostream>

using namespace std;

class Place : public Command
{
public:
    Place() : Command("place") {};
    void fire(Cave& c, string userCommand);
};
#endif // PLACE_H
~~~~~~rock.h~~~~~~
#ifndef ROCK_H
#define ROCK_H

#include "blocks.h"
#include "thing.h"
#include <string>

// a giant bolder that stops tom from walking through this location
class Rock: public Thing, public Blocks
{
public:
    Rock(){};
    ~Rock(){};
    string getName()
    {
        return "rock";
    }
};

#endif // ROCK_H
~~~~~~test.cpp~~~~~~
/***
 * Do not change this file
 *
 * A script very much like this will be used to grade your code.
 *
 * I may add additional checks to ensure that no cheating takes place!
 *
 */

#include <iostream>
#include <fstream>
#include <stdexcept>
#include <sstream>
#include<iostream>
#include<string>
#include <dirent.h> // this might be tricky, but mostly there for gnu compilers.

#include "cave.h"
#include "coin.h"
#include "location.h"
#include "mushroom.h"


using namespace std;

int Location::count;
int Thing::count;

int test1() {

    Cave c(8,8);
    c.getTom()->setLocation(&c, 5, 5);

    bool goodA = true;

    // let's walk in a circle and check we get the results we expect
    c.command("move west");
    goodA &= (c.getTom()->getX() == 4);

    c.command("move north");
    goodA &= (c.getTom()->getY() == 4);

    c.command("move east");
    goodA &= (c.getTom()->getX() == 5);

    c.command("move south");
    goodA &= (c.getTom()->getY() == 5);

    // walk into wall to east
    for (int i = 0; i < 10; i++)
        c.command("move east");

    bool goodB = true;
    goodB &= (c.getTom()->getX() == 6);
    goodB &= (c.getTom()->getY() == 5);

    return (goodA ? 1 : 0) + (goodB ? 1 : 0);
}

int test2() {

    bool goodA = true, goodB = true;

    try {

        for (int i = 5; i < 20; i+=2)
            for (int j = 5; j < 27; j+=3) {
                Cave c(i,j);

                goodA &= c.getWidth() == i;
                goodA &= c.getHeight() == j;

                for (int x = 0; x < i; x++)
                    for (int y = 0; y < j; y++)
                        if (x > 0 && x < i-1 && y> 0 && y < j-1)
                            goodB &= !c.getMap()[x][y]->isBlocking();
                        else
                            goodB &= c.getMap()[x][y]->isBlocking();
            }

    }
    catch (...) // an errors (including logic_error) fall through here
    {
        goodA = goodB = false;
    }

    return (goodA ? 1 : 0) + (goodB ? 1 : 0);
}

int test3() {

    Location::count = 0; // reset the counters in location and thing
    Thing::count = 0;

    bool goodA = true;
    {
        int x = 8, y= 8;

        Cave c(x, y);

        goodA &= Location::count == x*y;
    }

    goodA &= Location::count == 0;
    goodA &= Thing::count == 0;

    return goodA ? 2 : 0;
}

void test4CheckPointers(Cave *a, Cave &b, bool& goodA) {

    goodA &= b.getMap() != a -> getMap(); // check that we created a new map
    goodA &= b.getMap()[0][0] != a -> getMap()[0][0]; // has the vector in Location been copied?
    goodA &= b.getMap()[0][0]->getThings()->at(0) != a -> getMap()[0][0]->getThings()->at(0); // has the Rock been copied
}

int test4() {

    bool goodA = true, goodB = true;

    Cave *a = new Cave(8, 8); // so we don't destroy any (accidently) shallow copied copies twice
    Cave b(*a);

    test4CheckPointers(a, b, goodA);

    Cave *c = new Cave(8,8);
    Cave d(8,8);
    d = *c;

    test4CheckPointers(c, d, goodB);

    return (goodA ? 1 : 0) + (goodB ? 1 : 0);
}

bool hasCoin (Cave &c, int x, int y) {

    for (auto t : *c.getMap()[x][y]->getThings())
        if ( dynamic_cast<Coin*>(t) )
            return true;

    return false;
}

bool hasMushroom (Cave &c, int x, int y) {

    for (auto t : *c.getMap()[x][y]->getThings())
        if ( dynamic_cast<Mushroom*>(t) )
            return true;

    return false;
}

int test5() {

    bool goodA = true, goodB = true;

    Cave c(8,8);
    c.getTom()->setLocation(&c, 5, 5);
    c.command("throw coin north");
    goodA &= hasCoin(c, 5,4);

    c.command("throw coin east");
    goodA &= hasCoin(c, 6,5);

    c.getTom()->setLocation(&c, 6,6);

    c.command("throw coin west");
    goodA &= hasCoin(c, 5,6);

    c.command("throw coin east");
    goodB &= !hasCoin(c, 7,6); // can't throw - rock
    goodB &= goodA; // no marks for rock-blocking if throwing didn't work

    return (goodA ? 1 : 0) + (goodB ? 1 : 0);
}


bool hasBomb (Cave &c, int x, int y) {

    for (auto t : *c.getMap()[x][y]->getThings())
        if ( t->getName().compare("bomb") == 0 )
            return true;

    return false;
}

int countBombs(Cave *c) {
    int count = 0;
    for (int x = 0; x < c->getWidth(); x++)
        for (int y = 0; y < c->getHeight(); y++)
            if (hasBomb(*c, x, y))
                count++;

    return count;
}

int test6() {

    bool goodA = true, goodB = true, goodC = true;

    Cave c(8,8);


    goodA &= countBombs(&c) == 0;

    const int bombCount = 8;
    int bombs[bombCount][2] = {{1,1},{2,2},{1,7},{6,6},{5,5},{6,5},{5,6},{7,5}};

    for (int x = 0; x < bombCount; x++) {
        c.getTom()->setLocation(&c,bombs[x][0],bombs[x][1]);
        c.command("place bomb");
    }

    goodA &= countBombs(&c) == bombCount;

    c.getTom()->setLocation(&c,5,5);
    c.command("place mushroom");
    c.getTom()->setLocation(&c,4,5);
    c.command("place mushroom");

    c.getTom()->setLocation(&c,1,2);
    c.command("explode");

    goodB &= countBombs(&c) == 6;

    c.getTom()->setLocation(&c,5,4);
    c.command("explode");
    goodB &= countBombs(&c) == 1;

    goodC &= !c.getMap()[7][5]->isBlocking(); // a bomb inside the rock should destroy the rock
    goodC &=  c.getMap()[7][6]->isBlocking(); // other rocks remain untouched
    goodC &= !hasMushroom (c, 5,5); // mushroom should be destroyed
    goodC &=  hasMushroom (c, 4,5); // mushroom should not explode

    c.command("place bomb");

    return (goodA ? 1 : 0) + (goodB ? 3 : 0) + (goodC ? 1 : 0);
}

bool endsWith(string const & value, string const & ending) {

    if (ending.size() > value.size()) return false;
    return equal(ending.rbegin(), ending.rend(), value.rbegin());
}

bool isEmpty(const string& file)  { // https://stackoverflow.com/questions/2424138/portable-way-to-get-file-size-in-c-c

    ifstream ifile(file);
    ifile.seekg(0, ios_base::end);
    return ifile.tellg() == 0;
}

void test() {

    cerr.setstate(ios_base::failbit); // no error output while testing please!

    cout << "Enter folder containing all cpp source files (or enter to only run tests):";
    string folder;
    getline(cin, folder); // comment out this line to test quickly

    stringstream buffer;
    string username = "";

    if (folder.length() > 0) {
        cout << endl <<"Enter leeds username (sc19xxx):";
        getline(cin, username);
        username += ".patch";

        if (auto dir = opendir(folder.c_str())) {
            while (auto f = readdir(dir)) {
                if (!f->d_name || f->d_name[0] == '.')
                    continue;

                string name = string (f->d_name);
                if (endsWith(name, ".cpp") || endsWith(name, ".pro") || endsWith(name, ".h") ) {
                    printf("Adding file: %s\n", f->d_name);

                    string fileName = folder+"/"+name;

                    if (isEmpty(fileName)) {
                        cout <<"...warning - empty file, please remove" << endl;
                        continue;
                    }

                    ifstream file(fileName );
                    stringstream tmp;

                    buffer << "~~~~~~"<<name<<"~~~~~~\n";
                    buffer << file.rdbuf();
                }
            }
            closedir(dir);
        }
        else {
            cout <<"folder not found: " << folder << endl;
            return;
        }
    }

    stringstream testResults;

    testResults << "test results" << endl;
    testResults << "1. " << test1() << endl;
    testResults << "2. " << test2() << endl;
    testResults << "3. " << test3() << endl;
    testResults << "4. " << test4() << endl;
    testResults << "5. " << test5() << endl;
    testResults << "6. " << test6() << endl;

    cout << testResults.str();

    if (folder.length() > 0) {
        ofstream outfile;
        outfile.open(folder+"/"+username, ios::out | ios::trunc );
        outfile << "******" << username << "******\n";
        outfile << testResults.str();
        outfile << buffer.str();
        outfile.close();
    }
}
~~~~~~thing.h~~~~~~
//
// Do not change this file
//

#ifndef THING_H
#define THING_H

#include <vector>
#include <string>
using namespace std;

// the superclass of all things in the cave.
class Thing
{
public:
    Thing()
    {
        ++count;
    };
    virtual ~Thing()
    {
        --count;
    };
    virtual string getName() =0;
    virtual Thing* clone()
    {
        return NULL; // this could be overridden by subclasses.
    }
    static int count; // a count of the number of locations allocated/deleted
};

#endif // THING_H
~~~~~~throw.cpp~~~~~~
#include "throw.h"
#include "thing.h"

// Function to throw an object one place adjacent to Tom's current location
void Throw::fire(Cave& c, string userCommand)
{
    // Calls functions which split the input and get the necessary words
    string s = firstCommand(userCommand);
    string d = secondCommand(userCommand);

    // Get current location of Tom
    Location* loc;
    int newTomX = c.getTom()->getX(),  newTomY = c.getTom()->getY();

    // Set location to updated location based on input
    if (d == "north")
    {
        loc = c.getMap()[c.getTom()->getX()][c.getTom()->getY()-1];
        newTomY++;
    }
    else if (d == "east")
    {
        loc = c.getMap()[c.getTom()->getX()+1][c.getTom()->getY()];
        newTomX++;
    }
    else if (d == "south")
    {
        loc = c.getMap()[c.getTom()->getX()][c.getTom()->getY()+1];
        newTomY--;
    }
    else if (d == "west")
    {
        loc = c.getMap()[c.getTom()->getX()-1][c.getTom()->getY()];
        newTomX--;
    }
    else
    {
        cerr << "Invalid direction" << endl;
        return;
    }

    // Check new location is in bounds
    if (newTomX < 0 || newTomY < 0 || newTomX >= c.getHeight() ||newTomY >= c.getHeight())
    {
        cerr << "can't throw object into the void" << endl;
        return;
    }

    // Check if anything is already in the location
    if ( c.getMap()[newTomX][newTomY] -> isBlocking() )
    {
        cerr << "something is blocking the way" << endl;
        return;
    }

    // Throw item
    if (s.compare("coin")==0)
        loc ->add(new Coin());
    else if (s.compare("mushroom")==0)
        loc ->add(new Mushroom());
    else
        cerr << "I don't know how to " << userCommand << endl;

}
~~~~~~throw.h~~~~~~
#ifndef THROW_H
#define THROW_H

#include "coin.h"
#include "command.h"
#include "mushroom.h"
#include "rock.h"
#include <iostream>

using namespace std;

class Throw : public Command
{
public:
    Throw() : Command("throw") {};
    void fire(Cave& c, string userCommand);

};

#endif // THROW_H
~~~~~~tom.cpp~~~~~~
//
// Do not change this file
//

#include "tom.h"
#include "cave.h"
#include <stdio.h>
#include <string>
#include <iostream>

void Tom::setLocation(Cave* c, int new_x, int new_y)
{
    if (location[0] >= 0 && location[1] >= 0)  // if we've set the location before, remove tom from old position
        c -> getMap()[location[0]][location[1]]->remove(this);
    string str = "";


    location[0] = new_x;
    location[1] = new_y;


    c -> getMap()[location[0]][location[1]]->add(this);
}
~~~~~~tom.h~~~~~~
//
// Do not change this file
//

#ifndef TOM_H
#define TOM_H

#include "cave.h"
#include "thing.h"

class Cave; // forward reference because the tom class needs to know about the cave class
class Tom : public Thing
{
public:
    Tom(){}
    ~Tom(){}
    string getName()
    {
        return "tom";
    }
    void setLocation(Cave* c, int x, int y);
    int getX()
    {
        return location[0];
    }
    int getY()
    {
        return location[1];
    }
private:
    int location[2] = {-1,-1}; // fixed length array, so we can allocate automatically...
                               // ...note invalid location (-1,-1) before setLocation call.
};

#endif // TOM_H
